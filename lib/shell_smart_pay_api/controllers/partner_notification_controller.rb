# shell_smart_pay_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellSmartPayApi
  # PartnerNotificationController
  class PartnerNotificationController < BaseController
    # To access the Partnerâ€™s endpoints, for sending callback messages, Shell
    # will need to connect to the Partner API end points. It is recemmended that
    # the partner offers OAuth 2.0 as a standard for call back APIs and will
    # require the OAuth 2.0 token for authentication. Note this needs to be
    # implemented over HTTPS
    # @param [String] grant_type Required parameter: In OAuth 2.0, the term
    # grant typee refers to the way an application gets an access token. OAuth
    # 2.0 defines several grant types, including the authorization code flow.
    # @param [String] client_id Required parameter: After registering your app,
    # you will receive a client ID and a client secret. The client ID is
    # considered public information, and is used to build login URLs, or
    # included in Javascript source code on a page.
    # @param [String] client_secret Required parameter: After registering your
    # app, you will receive a client ID and a client secret. The client ID is
    # considered public information, and is used to build login URLs, or
    # included in Javascript source code on a page. The client secret must be
    # kept confidential.
    # @return [AccessTokenResponse] response from the API call.
    def partner_token(grant_type,
                      client_id,
                      client_secret)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/token',
                                     Server::SHELL)
                   .form_param(new_parameter(grant_type, key: 'grant_type'))
                   .form_param(new_parameter(client_id, key: 'client_id'))
                   .form_param(new_parameter(client_secret, key: 'client_secret'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(AccessTokenResponse.method(:from_hash))
                    .local_error('401',
                                 'Unauthorized',
                                 AccessTokenErrorException))
        .execute
    end

    # Enables Shell to inform partner of the successful completion of a
    # transaction. Note this needs to be implemented over HTTPS
    # @param [FinaliseFuelingRequest] body Optional parameter: Example:
    # @return [void] response from the API call.
    def finalise_fueling(body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/finaliseFueling',
                                     Server::SHELL)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Bad Request',
                                 APIException)
                    .local_error('401',
                                 'Unauthorized',
                                 APIException))
        .execute
    end

    # Enables Shell to inform partner that a Mobile Payment transaction has been
    # cancelled by Shell as an error/issue occured. Note this needs to be
    # implemented over HTTPS
    # @param [CancelFuelingRequest] body Optional parameter: Example:
    # @return [void] response from the API call.
    def cancel_fueling(body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/cancelFueling',
                                     Server::SHELL)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Bad Request',
                                 APIException)
                    .local_error('401',
                                 'Unauthorized',
                                 APIException))
        .execute
    end
  end
end
