# shell_smart_pay_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellSmartPayApi
  # # Digital Payments â€“ Errors  This section details the structure of the
  # response Body vs. the different types of errors that could be returned when
  # Digital Payments system responds with a 400 Response Code.   | Error Code
  # | Error Description   | Suggested message to end user   |  |-  |-  |-  |  |
  # 9342   | Transaction not cancelled, Txn number unknown   | Oops sorry! We
  # are unable to cancel the transaction. Please wait for the site to cancel the
  # transaction before you retry   |  | 50004   | Transaction not cancelled,
  # dispensing is already in progress   | Transaction cannot be cancelled,
  # fueling already in progress   |  | 50059   | Transaction not cancelable (not
  # in a 'Processing state')   | Transaction cannot be cancelled, fuel has
  # already been dispensed   |
  class CancelFuelingErrorResponseErrorException < APIException
    SKIP = Object.new
    private_constant :SKIP

    # The high level error code (e.g. missing data)
    # @return [String]
    attr_accessor :error_code

    # The high level error message (e.g. mandatory fields have not been
    # specified.
    # @return [String]
    attr_accessor :error_description

    # Array of error objects. Majority of the time the errorCode and
    # errorDescription will suffice
    # @return [Array[MppError]]
    attr_accessor :errors

    # The constructor.
    # @param [String] The reason for raising an exception.
    # @param [HttpResponse] The HttpReponse of the API call.
    def initialize(reason, response)
      super(reason, response)
      hash = APIHelper.json_deserialize(@response.raw_body)
      unbox(hash)
    end

    # Populates this object by extracting properties from a hash.
    # @param [Hash] The deserialized response sent by the server in the
    # response body.
    def unbox(hash)
      @error_code = hash.key?('errorCode') ? hash['errorCode'] : SKIP
      @error_description =
        hash.key?('errorDescription') ? hash['errorDescription'] : SKIP
      # Parameter is an array, so we need to iterate through it
      @errors = nil
      unless hash['errors'].nil?
        @errors = []
        hash['errors'].each do |structure|
          @errors << (MppError.from_hash(structure) if structure)
        end
      end

      @errors = SKIP unless hash.key?('errors')
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} error_code: #{@error_code}, error_description: #{@error_description},"\
      " errors: #{@errors}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} error_code: #{@error_code.inspect}, error_description:"\
      " #{@error_description.inspect}, errors: #{@errors.inspect}>"
    end
  end
end
