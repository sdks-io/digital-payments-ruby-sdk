# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # PrepareFuelingRequest Model.
  class PrepareFuelingRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The user’s current latitude
    # @return [Float]
    attr_accessor :latitude

    # The user’s current longitude
    # @return [Float]
    attr_accessor :longitude

    # The maximum fuelling amount that can be purchased. If the prepare fuelling
    # is successful and the Customer starts fuelling their car, the pump will
    # cut off once this threshold is reached. For B2B customers a maximum
    # ceiling is set against their Shell Card. As a result, this can be left
    # blank for B2B customers. If a value is provided it cannot be zero or lower
    # and values that exceed ceiling will be ignored.
    # @return [Float]
    attr_accessor :maximum_fueling_amount

    # Expectation is that a user has to be located at a Shell petrol station in
    # order to make this call. A user is recognised as being located at a Shell
    # station if the user’s current location (as determined by GPS) is within
    # 300 meters of a Shell station. Expectation is that requester will have
    # established the Shell petrol station the user is located at prior to
    # making this call by calling Station Locator APIs. The API will use
    # stationId and siteCountry/GPS to verify the user is The user’s current
    # latitude genuinely located at the specified Station. ‘mpp_station_id’ of
    # the Station Locator API should be used. Leading ‘0’ should be dropped and
    # only last four digits, should be used. E.G. for ‘00123’, only ‘0123’
    # should be used and for ‘04567’ only ‘4567’ should be used.
    # @return [String]
    attr_accessor :station_id

    # A two digit numeric number of the pump as marked on the forecourt (e.g.
    # pump number 12)
    # @return [String]
    attr_accessor :pump_id

    # Object containing Loyalty details
    # @return [Array[LoyaltyDetails]]
    attr_accessor :loyalty_details

    # The ID of the source application making this call. Each 3rd Party will be
    # issued with its own sourceApp ID that must be specified correctly here
    #  *   3rdParty_App_Archetype
    # @return [String]
    attr_accessor :source_application

    # The type of device making this call. Permitted values for deviceType:
    #  *  car
    #  *  phone
    # @return [String]
    attr_accessor :device_type

    # Object containing Payment details
    # @return [Array[PaymentDetailsItems]]
    attr_accessor :payment_details

    # Object containing device details
    # @return [Array[PrepareFuelingRequestDeviceDetailsItems]]
    attr_accessor :device_details

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['latitude'] = 'latitude'
      @_hash['longitude'] = 'longitude'
      @_hash['maximum_fueling_amount'] = 'maximumFuelingAmount'
      @_hash['station_id'] = 'stationId'
      @_hash['pump_id'] = 'pumpId'
      @_hash['loyalty_details'] = 'loyaltyDetails'
      @_hash['source_application'] = 'sourceApplication'
      @_hash['device_type'] = 'deviceType'
      @_hash['payment_details'] = 'paymentDetails'
      @_hash['device_details'] = 'deviceDetails'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        maximum_fueling_amount
        loyalty_details
        device_type
        device_details
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(latitude = nil,
                   longitude = nil,
                   station_id = nil,
                   pump_id = nil,
                   source_application = nil,
                   payment_details = nil,
                   maximum_fueling_amount = SKIP,
                   loyalty_details = SKIP,
                   device_type = SKIP,
                   device_details = SKIP)
      @latitude = latitude
      @longitude = longitude
      @maximum_fueling_amount = maximum_fueling_amount unless maximum_fueling_amount == SKIP
      @station_id = station_id
      @pump_id = pump_id
      @loyalty_details = loyalty_details unless loyalty_details == SKIP
      @source_application = source_application
      @device_type = device_type unless device_type == SKIP
      @payment_details = payment_details
      @device_details = device_details unless device_details == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      latitude = hash.key?('latitude') ? hash['latitude'] : nil
      longitude = hash.key?('longitude') ? hash['longitude'] : nil
      station_id = hash.key?('stationId') ? hash['stationId'] : nil
      pump_id = hash.key?('pumpId') ? hash['pumpId'] : nil
      source_application =
        hash.key?('sourceApplication') ? hash['sourceApplication'] : nil
      # Parameter is an array, so we need to iterate through it
      payment_details = nil
      unless hash['paymentDetails'].nil?
        payment_details = []
        hash['paymentDetails'].each do |structure|
          payment_details << (PaymentDetailsItems.from_hash(structure) if structure)
        end
      end

      payment_details = nil unless hash.key?('paymentDetails')
      maximum_fueling_amount =
        hash.key?('maximumFuelingAmount') ? hash['maximumFuelingAmount'] : SKIP
      # Parameter is an array, so we need to iterate through it
      loyalty_details = nil
      unless hash['loyaltyDetails'].nil?
        loyalty_details = []
        hash['loyaltyDetails'].each do |structure|
          loyalty_details << (LoyaltyDetails.from_hash(structure) if structure)
        end
      end

      loyalty_details = SKIP unless hash.key?('loyaltyDetails')
      device_type = hash.key?('deviceType') ? hash['deviceType'] : SKIP
      # Parameter is an array, so we need to iterate through it
      device_details = nil
      unless hash['deviceDetails'].nil?
        device_details = []
        hash['deviceDetails'].each do |structure|
          device_details << (PrepareFuelingRequestDeviceDetailsItems.from_hash(structure) if structure)
        end
      end

      device_details = SKIP unless hash.key?('deviceDetails')

      # Create object from extracted values.
      PrepareFuelingRequest.new(latitude,
                                longitude,
                                station_id,
                                pump_id,
                                source_application,
                                payment_details,
                                maximum_fueling_amount,
                                loyalty_details,
                                device_type,
                                device_details)
    end
  end
end
