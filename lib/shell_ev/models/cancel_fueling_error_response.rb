# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # # Digital Payments â€“ Errors  This section details the structure of the
  # response Body vs. the different types of errors that could be returned when
  # Digital Payments system responds with a 400 Response Code.   | Error Code
  # | Error Description   | Suggested message to end user   |  |-  |-  |-  |  |
  # 9342   | Transaction not cancelled, Txn number unknown   | Oops sorry! We
  # are unable to cancel the transaction. Please wait for the site to cancel the
  # transaction before you retry   |  | 50004   | Transaction not cancelled,
  # dispensing is already in progress   | Transaction cannot be cancelled,
  # fueling already in progress   |  | 50059   | Transaction not cancelable (not
  # in a 'Processing state')   | Transaction cannot be cancelled, fuel has
  # already been dispensed   |
  class CancelFuelingErrorResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The high level error code (e.g. missing data)
    # @return [String]
    attr_accessor :error_code

    # The high level error message (e.g. mandatory fields have not been
    # specified.
    # @return [String]
    attr_accessor :error_description

    # Array of error objects. Majority of the time the errorCode and
    # errorDescription will suffice
    # @return [Array[MppError]]
    attr_accessor :errors

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['error_code'] = 'errorCode'
      @_hash['error_description'] = 'errorDescription'
      @_hash['errors'] = 'errors'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        error_code
        error_description
        errors
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(error_code = SKIP,
                   error_description = SKIP,
                   errors = SKIP)
      @error_code = error_code unless error_code == SKIP
      @error_description = error_description unless error_description == SKIP
      @errors = errors unless errors == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      error_code = hash.key?('errorCode') ? hash['errorCode'] : SKIP
      error_description =
        hash.key?('errorDescription') ? hash['errorDescription'] : SKIP
      # Parameter is an array, so we need to iterate through it
      errors = nil
      unless hash['errors'].nil?
        errors = []
        hash['errors'].each do |structure|
          errors << (MppError.from_hash(structure) if structure)
        end
      end

      errors = SKIP unless hash.key?('errors')

      # Create object from extracted values.
      CancelFuelingErrorResponse.new(error_code,
                                     error_description,
                                     errors)
    end
  end
end
