# shell_smart_pay_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellSmartPayApi
  # DeviceDetail Model.
  class DeviceDetail < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # This is the mobile device’s unique ID (Vendor ID for iOS vs. Android ID
    # for Android). This is only used for transactions made via the Shell Mobile
    # App and will therefore be mandatory for requests originating from Shell’s
    # mobile app but can be ignored by all other parties.
    # @return [String]
    attr_accessor :device_id

    # This is the mobile device’s model (machine name/systemInfo for iOS vs.
    # Build.MODEL for Android).  This is only used for transactions made via the
    # Shell Mobile App and will therefore be mandatory for requests originating
    # from Shell’s mobile app but can be ignored by all other parties.
    # @return [String]
    attr_accessor :model

    # This is the mobile device’s OS Version. This is only used for transactions
    # made via the Shell Mobile App and will therefore be mandatory for requests
    # originating from Shell’s mobile app but can be ignored by all other
    # parties.
    # @return [String]
    attr_accessor :os_version

    # This is only used for transactions made via Android versions of the Shell
    # Mobile App and will therefore be mandatory for requests originating from
    # Shell’s Android mobile app but can be ignored by all other devices and/or
    # parties.
    # This field is used to capture the Shell App build that was used to make
    # this call.
    # @return [String]
    attr_accessor :other_device_information

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'deviceId'
      @_hash['model'] = 'model'
      @_hash['os_version'] = 'osVersion'
      @_hash['other_device_information'] = 'otherDeviceInformation'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_id
        model
        os_version
        other_device_information
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id = SKIP, model = SKIP, os_version = SKIP,
                   other_device_information = SKIP)
      @device_id = device_id unless device_id == SKIP
      @model = model unless model == SKIP
      @os_version = os_version unless os_version == SKIP
      @other_device_information = other_device_information unless other_device_information == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = hash.key?('deviceId') ? hash['deviceId'] : SKIP
      model = hash.key?('model') ? hash['model'] : SKIP
      os_version = hash.key?('osVersion') ? hash['osVersion'] : SKIP
      other_device_information =
        hash.key?('otherDeviceInformation') ? hash['otherDeviceInformation'] : SKIP

      # Create object from extracted values.
      DeviceDetail.new(device_id,
                       model,
                       os_version,
                       other_device_information)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id}, model: #{@model}, os_version: #{@os_version},"\
      " other_device_information: #{@other_device_information}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id.inspect}, model: #{@model.inspect}, os_version:"\
      " #{@os_version.inspect}, other_device_information: #{@other_device_information.inspect}>"
    end
  end
end
