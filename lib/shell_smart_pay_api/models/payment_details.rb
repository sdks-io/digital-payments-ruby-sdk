# shell_smart_pay_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellSmartPayApi
  # Object containing Payment details
  class PaymentDetails < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The type of commercial transaction. Permitted value\:
    #  *  B2B
    # @return [String]
    attr_accessor :payment_category

    # The payment method used to make the transaction. Possible values include: 
    #   *  euroShell
    # @return [String]
    attr_accessor :payment_method_id

    # Object containing Payment Property details Please note:
    #    All the attributes are optional as they serve all payment methods (i.e.
    # different payment methods require different fields to be filled/mandated).
    # As a result, some of these fields will be mandatory depending on the
    # selected payment method and the API will return an error if they are not
    # completed
    # @return [PaymentProperties]
    attr_accessor :payment_properties

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payment_category'] = 'paymentCategory'
      @_hash['payment_method_id'] = 'paymentMethodId'
      @_hash['payment_properties'] = 'paymentProperties'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        payment_category
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(payment_method_id = nil, payment_properties = nil,
                   payment_category = SKIP)
      @payment_category = payment_category unless payment_category == SKIP
      @payment_method_id = payment_method_id
      @payment_properties = payment_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payment_method_id =
        hash.key?('paymentMethodId') ? hash['paymentMethodId'] : nil
      payment_properties = PaymentProperties.from_hash(hash['paymentProperties']) if
        hash['paymentProperties']
      payment_category =
        hash.key?('paymentCategory') ? hash['paymentCategory'] : SKIP

      # Create object from extracted values.
      PaymentDetails.new(payment_method_id,
                         payment_properties,
                         payment_category)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} payment_category: #{@payment_category}, payment_method_id:"\
      " #{@payment_method_id}, payment_properties: #{@payment_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} payment_category: #{@payment_category.inspect}, payment_method_id:"\
      " #{@payment_method_id.inspect}, payment_properties: #{@payment_properties.inspect}>"
    end
  end
end
