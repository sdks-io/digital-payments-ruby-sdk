# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # FuelingController
  class FuelingController < BaseController
    # The Digital Payments Service enables 3rd Parties to trigger the refuel
    # process which, if successful, will unlock a pump/nozzle ready for
    # fuelling. Enables a 3rd party to request an access token to start using
    # fueling.
    #    APIs
    # @param [String] grant_type Required parameter: In OAuth 2.0, the term
    # grant type refers to the way an application gets an access token. OAuth
    # 2.0 defines several grant types, including the authorization code flow.
    # @param [String] client_id Required parameter: After registering your app,
    # you will receive a client ID and a client secret. The client ID is
    # considered public information, and is used to build login URLs, or
    # included in Javascript source code on a page.
    # @param [String] client_secret Required parameter: After registering your
    # app, you will receive a client ID and a client secret. The client ID is
    # considered public information, and is used to build login URLs, or
    # included in Javascript source code on a page. The client secret must be
    # kept confidential.
    # @return [MppAccesTokenResponse] response from the API call
    def mpp_token(grant_type,
                  client_id,
                  client_secret)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/Fueling/v1/oauth/token',
                                     Server::DEFAULT)
                   .form_param(new_parameter(grant_type, key: 'grant_type'))
                   .form_param(new_parameter(client_id, key: 'client_id'))
                   .form_param(new_parameter(client_secret, key: 'client_secret'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oAuthTokenPost')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(MppAccesTokenResponse.method(:from_hash))
                   .local_error('401',
                                'Unauthorized. The request has not been applied because it lacks'\
                                 ' valid authentication credentials for the target resource.',
                                MppAccesTokenErrorResponseException))
        .execute
    end

    # Enables a 3rd party to request to unlock a pump so that they may fill up
    # to a pre-authorised limit. The fuel types that are unlocked may also be
    # determined by permitted fuels stored against the user/entity profile
    # @param [String] site_country Required parameter: Country ISO code
    # @param [String] currency Required parameter: Currency ISO code
    # @param [PrepareFuelingRequest] body Required parameter: Example:
    # @return [PrepareFuelingResponse] response from the API call
    def mpp_prepare_fueling(site_country,
                            currency,
                            body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/Fueling/v1/fueling',
                                     Server::DEFAULT)
                   .query_param(new_parameter(site_country, key: 'siteCountry'))
                   .query_param(new_parameter(currency, key: 'currency'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('oAuthTokenPost', 'MppToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(PrepareFuelingResponse.method(:from_hash))
                   .local_error('400',
                                'Error Occurred. Request did not include bearer token or token'\
                                 ' provided and is invalid.',
                                APIException)
                   .local_error('401',
                                'Unauthorized',
                                APIException)
                   .local_error('403',
                                'Forbidden. Requestor is not permitted to call the API',
                                APIException)
                   .local_error('404',
                                'Not Found. Request received by the server but requested URL not'\
                                 ' found',
                                APIException))
        .execute
    end

    # Enables a partner user to cancel pump reservation from the App
    # @param [String] mpp_transaction_id Required parameter: The ID of the
    # transaction thatâ€™s being cancelled
    # @return [void] response from the API call
    def mpp_cancel_fueling(mpp_transaction_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/Fueling/v1/fueling/{mppTransactionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(mpp_transaction_id, key: 'mppTransactionId')
                                    .should_encode(true))
                   .auth(And.new('oAuthTokenPost', 'MppToken')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('400',
                                'Error Occurred. The server cannot or will not process the'\
                                 ' request due to an apparent client error (e.g., malformed'\
                                 ' request syntax, invalid request message). Please see below for'\
                                 ' information regarding structure of Response Body vs. all'\
                                 ' possible errors that could be returned.',
                                CancelFuelingErrorResponseErrorException)
                   .local_error('401',
                                'Unauthorized. Request did not include bearer token or token'\
                                 ' provided and is invalid.',
                                CancelFuelingErrorResponseErrorException)
                   .local_error('403',
                                'Forbidden. Requestor is not permitted to call the API.',
                                APIException)
                   .local_error('404',
                                'Not Found. Request received by the server but requested URL not'\
                                 ' found',
                                APIException))
        .execute
    end
  end
end
