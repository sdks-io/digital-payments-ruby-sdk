# shell_smart_pay_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellSmartPayApi
  # The response of prepare fueling returns
  class PrepareFuelingResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique identifier of the Order. NB at this stage the Customer hasn’t
    # actually bought anything so there’s no formal transaction associated with
    # the Order. A transaction is not processed until refuelling has been
    # completed successfully and will be triggered by returning the nozzle to
    # the pump.
    # @return [String]
    attr_accessor :mpp_transaction_id

    # An array of Strings that contain the list of products that the user can
    # purchase at the specified Station/Pump. The text is localized based on the
    # country.
    # @return [Array[String]]
    attr_accessor :products

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['mpp_transaction_id'] = 'mppTransactionId'
      @_hash['products'] = 'products'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        products
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(mpp_transaction_id = nil, products = SKIP)
      @mpp_transaction_id = mpp_transaction_id
      @products = products unless products == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      mpp_transaction_id =
        hash.key?('mppTransactionId') ? hash['mppTransactionId'] : nil
      products = hash.key?('products') ? hash['products'] : SKIP

      # Create object from extracted values.
      PrepareFuelingResponse.new(mpp_transaction_id,
                                 products)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} mpp_transaction_id: #{@mpp_transaction_id}, products: #{@products}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} mpp_transaction_id: #{@mpp_transaction_id.inspect}, products:"\
      " #{@products.inspect}>"
    end
  end
end
