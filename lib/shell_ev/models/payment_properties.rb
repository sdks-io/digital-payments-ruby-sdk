# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # Object containing Payment Property details Please note:    All the
  # attributes are optional as they serve all payment methods (i.e. different
  # payment methods require different fields to be filled/mandated). As a
  # result, some of these fields will be mandatory depending on the selected
  # payment method and the API will return an error if they are not completed
  class PaymentProperties < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The type of payment (e.g. Credit Card, Debit Card)
    # @return [String]
    attr_accessor :payment_type

    # This is only used for PayPal. During the creation of the user’s profile an
    # ID (clientMetadataId) will have been created by PayPal and stored by
    # Shell. Thus, when PayPal payments are made this ID must be included in
    # order for the payment to be processed
    # @return [String]
    attr_accessor :client_metadata_id

    # This is only used for ApplePay and AndroidPay. Users using either of these
    # payment methods use device biometrics to authenticate themselves against
    # their respective payment method/provider (e.g. retina, fingerprint).
    # Successful authentication will result in Apple/Android issuing a Payment
    # Token which should be specified here
    # @return [String]
    attr_accessor :token

    # This is the payment identifier and it is only used for ApplePay and
    # AndroidPay.
    # @return [String]
    attr_accessor :identifier

    # This is the payment network (e.g. Visa, Mastercard) and it is only used
    # for ApplePay and AndroidPay.
    # @return [String]
    attr_accessor :network

    # This is only relevant for transactions made by B2B customers using the
    # Shell Card payment method. The ‘cardIdentifier’ is the unique identifier
    # provided by Commercial Fleet and shared with the Shell mobile payments
    # platform. This reference ID is used in interactions with the Commercial
    # Fleet application to retrieve the fueling token - use the cardIdentifier
    # when requesting a DPAN.
    # @return [String]
    attr_accessor :card_identifier

    # This is only relevant for transactions made by B2B customers using a Shell
    # Card payment method. During set up of the user’s Shell Card it’s possible
    # to configure the card such that users are forced to provide an odometer
    # reading before a Sale can begin processing. This field must be filled if
    # the B2B user’s Shell Card has been configured this way but will be left
    # blank in all other cases.
    # @return [String]
    attr_accessor :odometer

    # Only relevant if Customer attempting to pay with B2B Shell Card. Customers
    # attempting to pay with a B2B Shell Card may have to specify their Fleet ID
    # as an extra authorisation/security step. Shell Card configuration will
    # determine whether or not Fleet ID needs to be provided. Please note this
    # field is a 6 character numeric field.
    # @return [String]
    attr_accessor :fleet_id

    # This is only used for transactions made by B2B customers using the Shell
    # Card payment method. 
    #  In this scenario the expectation is that :\ a B2B entity has been
    # successfully created that includes the external party’s reference for the
    # entity (e.g. Contract Number, VRN, customer email); a new Shell Card (SFC)
    # has been successfully created; and Shell Card and B2B Entity have been
    # linked. 
    #  
    #  externalRefId refers to the 3rd Parties External Reference for the B2B
    # entity and will therefore be used to verify the Customer and SFC before
    # attempting to process a payment using the SFC card
    # @return [String]
    attr_accessor :external_ref_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payment_type'] = 'paymentType'
      @_hash['client_metadata_id'] = 'clientMetadataId'
      @_hash['token'] = 'token'
      @_hash['identifier'] = 'identifier'
      @_hash['network'] = 'network'
      @_hash['card_identifier'] = 'cardIdentifier'
      @_hash['odometer'] = 'odometer'
      @_hash['fleet_id'] = 'fleetId'
      @_hash['external_ref_id'] = 'externalRefId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        payment_type
        client_metadata_id
        token
        identifier
        network
        odometer
        fleet_id
        external_ref_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(card_identifier = nil,
                   payment_type = SKIP,
                   client_metadata_id = SKIP,
                   token = SKIP,
                   identifier = SKIP,
                   network = SKIP,
                   odometer = SKIP,
                   fleet_id = SKIP,
                   external_ref_id = SKIP)
      @payment_type = payment_type unless payment_type == SKIP
      @client_metadata_id = client_metadata_id unless client_metadata_id == SKIP
      @token = token unless token == SKIP
      @identifier = identifier unless identifier == SKIP
      @network = network unless network == SKIP
      @card_identifier = card_identifier
      @odometer = odometer unless odometer == SKIP
      @fleet_id = fleet_id unless fleet_id == SKIP
      @external_ref_id = external_ref_id unless external_ref_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      card_identifier =
        hash.key?('cardIdentifier') ? hash['cardIdentifier'] : nil
      payment_type = hash.key?('paymentType') ? hash['paymentType'] : SKIP
      client_metadata_id =
        hash.key?('clientMetadataId') ? hash['clientMetadataId'] : SKIP
      token = hash.key?('token') ? hash['token'] : SKIP
      identifier = hash.key?('identifier') ? hash['identifier'] : SKIP
      network = hash.key?('network') ? hash['network'] : SKIP
      odometer = hash.key?('odometer') ? hash['odometer'] : SKIP
      fleet_id = hash.key?('fleetId') ? hash['fleetId'] : SKIP
      external_ref_id =
        hash.key?('externalRefId') ? hash['externalRefId'] : SKIP

      # Create object from extracted values.
      PaymentProperties.new(card_identifier,
                            payment_type,
                            client_metadata_id,
                            token,
                            identifier,
                            network,
                            odometer,
                            fleet_id,
                            external_ref_id)
    end
  end
end
