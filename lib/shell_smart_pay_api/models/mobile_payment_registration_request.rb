# shell_smart_pay_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellSmartPayApi
  # MobilePaymentRegistrationRequest Model.
  class MobilePaymentRegistrationRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique Reference ID the DPAN is registered to. The Reference ID has been
    # implemented to accept normal alphanumeric characters plus the following
    # ‘special characters’&colon;  dot, underscore and hyphen. The following
    # characters are not acceptable&colon; , / @ !  &num; & * ()
    # @return [String]
    attr_accessor :reference_id

    # Original card PAN (generated on creation of Card (see Card Order Service))
    # @return [String]
    attr_accessor :pan

    # Expiry Date associated with the PAN in format YYMM.
    # @return [String]
    attr_accessor :pan_expiry

    # Specifies how many months the DPAN should be valid for. If not present,
    # the Token Server determines the expiry date using its default algorithm.
    # Note that the Token Server might not respect this value and use configured
    # business rules to override the requested validity period
    # @return [Integer]
    attr_accessor :period

    # In Shell, a Payer can have several accounts (representing company
    # branches, divisions or generally different cost-centers that a customer
    # wants to group cards on). You can specify this property or the
    # AccountNumber.
    # @return [String]
    attr_accessor :account_id

    # The Payer Id, or the Customer Id of the Payment Customer. In Shell, a
    # Payer is a customer belonging to a specific market geography. A Payer can
    # have several Accounts; each account can then have different groups of
    # cards.
    # @return [String]
    attr_accessor :payer_id

    # The ID of the Collecting Company (in GFN), also known as Shell Code of the
    # selected payer. This property is mandatory if the ColCoCode code is not
    # passed
    # @return [String]
    attr_accessor :col_co_id

    # Array of Colco Ids
    # @return [Array[CollectingCompany]]
    attr_accessor :collecting_companies

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['reference_id'] = 'referenceId'
      @_hash['pan'] = 'pan'
      @_hash['pan_expiry'] = 'panExpiry'
      @_hash['period'] = 'period'
      @_hash['account_id'] = 'AccountId'
      @_hash['payer_id'] = 'PayerId'
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['collecting_companies'] = 'CollectingCompanies'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(reference_id = nil, pan = nil, pan_expiry = nil,
                   period = nil, account_id = nil, payer_id = nil,
                   col_co_id = nil, collecting_companies = nil)
      @reference_id = reference_id
      @pan = pan
      @pan_expiry = pan_expiry
      @period = period
      @account_id = account_id
      @payer_id = payer_id
      @col_co_id = col_co_id
      @collecting_companies = collecting_companies
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      reference_id = hash.key?('referenceId') ? hash['referenceId'] : nil
      pan = hash.key?('pan') ? hash['pan'] : nil
      pan_expiry = hash.key?('panExpiry') ? hash['panExpiry'] : nil
      period = hash.key?('period') ? hash['period'] : nil
      account_id = hash.key?('AccountId') ? hash['AccountId'] : nil
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : nil
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : nil
      # Parameter is an array, so we need to iterate through it
      collecting_companies = nil
      unless hash['CollectingCompanies'].nil?
        collecting_companies = []
        hash['CollectingCompanies'].each do |structure|
          collecting_companies << (CollectingCompany.from_hash(structure) if structure)
        end
      end

      collecting_companies = nil unless hash.key?('CollectingCompanies')

      # Create object from extracted values.
      MobilePaymentRegistrationRequest.new(reference_id,
                                           pan,
                                           pan_expiry,
                                           period,
                                           account_id,
                                           payer_id,
                                           col_co_id,
                                           collecting_companies)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} reference_id: #{@reference_id}, pan: #{@pan}, pan_expiry: #{@pan_expiry},"\
      " period: #{@period}, account_id: #{@account_id}, payer_id: #{@payer_id}, col_co_id:"\
      " #{@col_co_id}, collecting_companies: #{@collecting_companies}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} reference_id: #{@reference_id.inspect}, pan: #{@pan.inspect}, pan_expiry:"\
      " #{@pan_expiry.inspect}, period: #{@period.inspect}, account_id: #{@account_id.inspect},"\
      " payer_id: #{@payer_id.inspect}, col_co_id: #{@col_co_id.inspect}, collecting_companies:"\
      " #{@collecting_companies.inspect}>"
    end
  end
end
