# shell_smart_pay_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellSmartPayApi
  # Datum Model.
  class Datum < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The station’s unique site identifier – this must be ignored
    # @return [String]
    attr_accessor :id

    # All fuel stations are of at least one Type, indicating whether it is
    # Shell-branded or not, and if the
    # station can be used by trucks. Note that a station can have more than one
    # Type (e.g. Shell retail
    # sites (Type=0) can also be truck friendly (Type=2)). 
    # Type values are as follows:
    # *  0 = Shell owned/branded stations that are not also Type=2 or Type=3
    # *  1 = Partner stations accepting Shell Card  
    # *  2 = Shell owned/branded stations that are truck friendly but not Type=3
    # *  3 = Shell owned/branded stations that are truck only
    # @return [Integer]
    attr_accessor :type

    # The name of the site
    # @return [String]
    attr_accessor :name

    # The side address as a concatenation of address information
    # @return [String]
    attr_accessor :addr

    # The site’s latitude
    # @return [Float]
    attr_accessor :lat

    # The site’s longitude
    # @return [Float]
    attr_accessor :lon

    # An array of amenities available at the station (see above for complete
    # list)
    # @return [Array[Integer]]
    attr_accessor :amen

    # An array of fuels* available at the station.
    #  Global Product Group names:
    #  *  8 = CNG
    #  *  10 = Premium Gasoline
    #  *  11 = Premium Diesel
    #  *  12 = Fuelsave Midgrade Gasoline
    #  *  13 = Fuelsave Regular Diesel
    #  *  14 = Midgrade Gasoline
    #  *  15 = Low Octane gasoline
    #  *  16 = Regular Diesel
    #  *  17 = Autogas LPG
    #  *  18 = Auto/RV Propane
    #  *  20 = Hydrogen
    #  *  21 = Kerosene
    #  *  22 = Super Premium Gasoline
    #  *  23 = Unleaded Super
    #  *  24 = Truck Diesel
    #  *  25 = Super98
    #  *  26 = GTL
    #  *  27 = Fuelsave 98
    #  *  28 = LNG
    #  *  29 = DieselFit
    #  *  30 = Shell Recharge
    #  
    #  *An external mapping table may need to be maintained if it is required to
    # display true fuel product names (as visible on the site)
    # @return [Array[Integer]]
    attr_accessor :fuel

    # Object containing address details/elements
    # @return [Loc]
    attr_accessor :loc

    # This is the 5-digit Shell Station ID. Leading ‘0’ should be dropped and
    # only last four digits, should be used. E.G. for ‘00123’, only ‘0123’
    # should be used and for ‘04567’ only ‘4567’ should be used.
    # @return [String]
    attr_accessor :mpp_station_id

    # The Mobile Payment Platform recognises a user being located at a Shell
    # Station if their GPS is within 300m of a Shell station. Some locations
    # will return multiple Shell Stations within a 300 meter radius. This is an
    # issue for Mobile Payments as it needs  to accurately identify the station
    # the Customer is located at to ensure the correct pump is released 
    # In Germany such locations have been identified and each Station has been
    # assigned a unique letter (e.g. A, B, C). These letters are clearly visible
    # at the stations. If a Mobile Payments user is located at such a location,
    # they will need to identify the Station by identifying and specifying the
    # Station’s corresponding letter as part of the refuelling journey. 
    # The double_site_id is used to store the Stations unique letter/ID value.
    # It’s only populated if/when 1 or more stations are within 300m from this
    # station.
    # @return [String]
    attr_accessor :double_site_id

    # An Array of the station’s opening hours. This may have opening and closing
    # times in hours, minutes and the day of the week.
    # @return [Array[OpeningHour]]
    attr_accessor :opening_hours

    # Station’s contact telephone number
    # @return [String]
    attr_accessor :telephone

    # Station’s authorisation code
    # @return [String]
    attr_accessor :authorisation_code

    # Station’s mobile payment preauthorisation value
    # @return [Integer]
    attr_accessor :mp_preauth

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['type'] = 'type'
      @_hash['name'] = 'name'
      @_hash['addr'] = 'addr'
      @_hash['lat'] = 'lat'
      @_hash['lon'] = 'lon'
      @_hash['amen'] = 'amen'
      @_hash['fuel'] = 'fuel'
      @_hash['loc'] = 'loc'
      @_hash['mpp_station_id'] = 'mpp_station_id'
      @_hash['double_site_id'] = 'double_site_id'
      @_hash['opening_hours'] = 'opening_hours'
      @_hash['telephone'] = 'telephone'
      @_hash['authorisation_code'] = 'authorisation_code'
      @_hash['mp_preauth'] = 'mp_preauth'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        type
        name
        addr
        lat
        lon
        amen
        fuel
        loc
        mpp_station_id
        double_site_id
        opening_hours
        telephone
        authorisation_code
        mp_preauth
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, type = SKIP, name = SKIP, addr = SKIP, lat = SKIP,
                   lon = SKIP, amen = SKIP, fuel = SKIP, loc = SKIP,
                   mpp_station_id = SKIP, double_site_id = SKIP,
                   opening_hours = SKIP, telephone = SKIP,
                   authorisation_code = SKIP, mp_preauth = SKIP)
      @id = id unless id == SKIP
      @type = type unless type == SKIP
      @name = name unless name == SKIP
      @addr = addr unless addr == SKIP
      @lat = lat unless lat == SKIP
      @lon = lon unless lon == SKIP
      @amen = amen unless amen == SKIP
      @fuel = fuel unless fuel == SKIP
      @loc = loc unless loc == SKIP
      @mpp_station_id = mpp_station_id unless mpp_station_id == SKIP
      @double_site_id = double_site_id unless double_site_id == SKIP
      @opening_hours = opening_hours unless opening_hours == SKIP
      @telephone = telephone unless telephone == SKIP
      @authorisation_code = authorisation_code unless authorisation_code == SKIP
      @mp_preauth = mp_preauth unless mp_preauth == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      addr = hash.key?('addr') ? hash['addr'] : SKIP
      lat = hash.key?('lat') ? hash['lat'] : SKIP
      lon = hash.key?('lon') ? hash['lon'] : SKIP
      amen = hash.key?('amen') ? hash['amen'] : SKIP
      fuel = hash.key?('fuel') ? hash['fuel'] : SKIP
      loc = Loc.from_hash(hash['loc']) if hash['loc']
      mpp_station_id =
        hash.key?('mpp_station_id') ? hash['mpp_station_id'] : SKIP
      double_site_id =
        hash.key?('double_site_id') ? hash['double_site_id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      opening_hours = nil
      unless hash['opening_hours'].nil?
        opening_hours = []
        hash['opening_hours'].each do |structure|
          opening_hours << (OpeningHour.from_hash(structure) if structure)
        end
      end

      opening_hours = SKIP unless hash.key?('opening_hours')
      telephone = hash.key?('telephone') ? hash['telephone'] : SKIP
      authorisation_code =
        hash.key?('authorisation_code') ? hash['authorisation_code'] : SKIP
      mp_preauth = hash.key?('mp_preauth') ? hash['mp_preauth'] : SKIP

      # Create object from extracted values.
      Datum.new(id,
                type,
                name,
                addr,
                lat,
                lon,
                amen,
                fuel,
                loc,
                mpp_station_id,
                double_site_id,
                opening_hours,
                telephone,
                authorisation_code,
                mp_preauth)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, type: #{@type}, name: #{@name}, addr: #{@addr}, lat: #{@lat},"\
      " lon: #{@lon}, amen: #{@amen}, fuel: #{@fuel}, loc: #{@loc}, mpp_station_id:"\
      " #{@mpp_station_id}, double_site_id: #{@double_site_id}, opening_hours: #{@opening_hours},"\
      " telephone: #{@telephone}, authorisation_code: #{@authorisation_code}, mp_preauth:"\
      " #{@mp_preauth}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, type: #{@type.inspect}, name: #{@name.inspect}, addr:"\
      " #{@addr.inspect}, lat: #{@lat.inspect}, lon: #{@lon.inspect}, amen: #{@amen.inspect},"\
      " fuel: #{@fuel.inspect}, loc: #{@loc.inspect}, mpp_station_id: #{@mpp_station_id.inspect},"\
      " double_site_id: #{@double_site_id.inspect}, opening_hours: #{@opening_hours.inspect},"\
      " telephone: #{@telephone.inspect}, authorisation_code: #{@authorisation_code.inspect},"\
      " mp_preauth: #{@mp_preauth.inspect}>"
    end
  end
end
