# shell_smart_pay_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellSmartPayApi
  # MppError Model.
  class MppError < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Descriptive, human readable error message. Description of the error (e.g.
    # This field is required and must to be between 1 and 255 characters long)
    # @return [String]
    attr_accessor :message

    # Additional classification specific for each error type e.g. 'noStock'. The
    # nature of the issue (e.g. missing)
    # @return [String]
    attr_accessor :reason

    # Identifier of the related object e.g. '1'. The field/attribute with an
    # issue (e.g. First Name)
    # @return [String]
    attr_accessor :subject

    # Type of the object related to the error e.g. 'entry'. The item it relates
    # to (e.g. Parameter)
    # @return [String]
    attr_accessor :subject_type

    # Type of the error e.g. 'LowStockError', 'Validation Error'
    # @return [String]
    attr_accessor :type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['message'] = 'message'
      @_hash['reason'] = 'reason'
      @_hash['subject'] = 'subject'
      @_hash['subject_type'] = 'subjectType'
      @_hash['type'] = 'type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        message
        reason
        subject
        subject_type
        type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(message = SKIP, reason = SKIP, subject = SKIP,
                   subject_type = SKIP, type = SKIP)
      @message = message unless message == SKIP
      @reason = reason unless reason == SKIP
      @subject = subject unless subject == SKIP
      @subject_type = subject_type unless subject_type == SKIP
      @type = type unless type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      message = hash.key?('message') ? hash['message'] : SKIP
      reason = hash.key?('reason') ? hash['reason'] : SKIP
      subject = hash.key?('subject') ? hash['subject'] : SKIP
      subject_type = hash.key?('subjectType') ? hash['subjectType'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP

      # Create object from extracted values.
      MppError.new(message,
                   reason,
                   subject,
                   subject_type,
                   type)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} message: #{@message}, reason: #{@reason}, subject: #{@subject},"\
      " subject_type: #{@subject_type}, type: #{@type}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} message: #{@message.inspect}, reason: #{@reason.inspect}, subject:"\
      " #{@subject.inspect}, subject_type: #{@subject_type.inspect}, type: #{@type.inspect}>"
    end
  end
end
